name: Deploy Terraform to Azure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destruir infraestrutura?'
        required: true
        default: 'false'

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: ðŸ”Ž Validar Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Limpar Terraform antigo
        working-directory: infra
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl

      - name: Criar Storage Account e container para backend
        run: |
          RESOURCE_GROUP="rg-tfstate"
          STORAGE_ACCOUNT="tfstatecurso$RANDOM"
          CONTAINER_NAME="tfstate"
          LOCATION="eastus"

          az group create --name $RESOURCE_GROUP --location $LOCATION
          az storage account create \
            --name $STORAGE_ACCOUNT \
            --resource-group $RESOURCE_GROUP \
            --location $LOCATION \
            --sku Standard_LRS \
            --encryption-services blob
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT \
            --auth-mode login

          echo "BACKEND_RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "BACKEND_STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_ENV
          echo "BACKEND_CONTAINER=$CONTAINER_NAME" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          terraform init \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
            -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$BACKEND_CONTAINER" \
            -reconfigure

      - name: Validar Sintaxe e Plano
        working-directory: infra
        run: |
          terraform fmt -check
          terraform validate
          terraform plan -out=tfplan

  deploy:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: ðŸš€ Deploy e ConfiguraÃ§Ã£o
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      vmName: ${{ steps.output_vm.outputs.vm_name }}
      adminUsername: ${{ steps.output_vm.outputs.admin_username }}
      publicIP: ${{ steps.output_vm.outputs.public_ip }}
      nsgName: ${{ steps.output_vm.outputs.nsg_name }}
      resourceGroup: ${{ steps.output_vm.outputs.resource_group }}
    steps:
      - name: Checkout do cÃ³digo
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Limpar Terraform antigo
        working-directory: infra
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl

      - name: Terraform Init
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          terraform init -reconfigure \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
            -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT" \
            -backend-config="container_name=$BACKEND_CONTAINER"

      - name: Desbloquear lock (se houver)
        working-directory: infra
        run: |
          LOCK_INFO=$(terraform show -json 2>/dev/null | jq -r '.values.root_module.resources[]? | select(.type=="azurerm_storage_account") | .address' || echo "")
          if [ -n "$LOCK_INFO" ]; then
            echo "Tentando desbloquear lock antigo..."
            terraform force-unlock -force "$LOCK_INFO" || echo "Nenhum lock ativo"
          fi

      - name: Aplicar Terraform
        working-directory: infra
        run: |
          terraform apply -auto-approve

      - name: Capturar Outputs
        id: output_vm
        working-directory: infra
        run: |
          echo "vm_name=$(terraform output -raw vm_name)" >> $GITHUB_OUTPUT
          echo "admin_username=$(terraform output -raw admin_username)" >> $GITHUB_OUTPUT
          echo "public_ip=$(terraform output -raw public_ip_address)" >> $GITHUB_OUTPUT
          echo "nsg_name=$(terraform output -raw nsg_name)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

      - name: Definir VariÃ¡veis de Ambiente
        run: |
          echo "VM_NAME=${{ steps.output_vm.outputs.vm_name }}" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=${{ steps.output_
