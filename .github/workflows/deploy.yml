name: Deploy Terraform to Azure

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destruir infraestrutura?'
        required: true
        default: 'false'

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-deploy
  cancel-in-progress: true

jobs:
  validate:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: 🔎 Validar Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Limpar Terraform antigo
        working-directory: infra
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl

      - name: Inicializar Terraform com backend e desbloquear se necessário
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}

          terraform init -reconfigure \
            -backend-config="resource_group_name=rg-tfstate" \
            -backend-config="storage_account_name=tfstatecurso12124" \
            -backend-config="container_name=tfstate" || true

          # Forçar unlock caso algum lock antigo exista
          terraform force-unlock -force $(terraform show -json | jq -r '.values.root_module.resources[] | select(.type=="azurerm_storage_account") | .instances[0].attributes.id' || echo "") || true

      - name: Validar Sintaxe e Plano
        working-directory: infra
        run: |
          terraform fmt -check
          terraform validate
          terraform plan -lock-timeout=5m -out=tfplan

  deploy:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: 🚀 Deploy e Configuração
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      vmName: ${{ steps.output_vm.outputs.vm_name }}
      adminUsername: ${{ steps.output_vm.outputs.admin_username }}
      publicIP: ${{ steps.output_vm.outputs.public_ip }}
      nsgName: ${{ steps.output_vm.outputs.nsg_name }}
      resourceGroup: ${{ steps.output_vm.outputs.resource_group }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Limpar Terraform antigo
        working-directory: infra
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl

      - name: Aplicar Terraform com timeout no lock
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}

          terraform init -reconfigure \
            -backend-config="resource_group_name=rg-tfstate" \
            -backend-config="storage_account_name=tfstatecurso12124" \
            -backend-config="container_name=tfstate"

          terraform apply -lock-timeout=5m -auto-approve

      - name: Capturar Outputs
        id: output_vm
        working-directory: infra
        run: |
          echo "vm_name=$(terraform output -raw vm_name)" >> $GITHUB_OUTPUT
          echo "admin_username=$(terraform output -raw admin_username)" >> $GITHUB_OUTPUT
          echo "public_ip=$(terraform output -raw public_ip_address)" >> $GITHUB_OUTPUT
          echo "nsg_name=$(terraform output -raw nsg_name)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

      - name: Definir Variáveis de Ambiente
        run: |
          echo "VM_NAME=${{ steps.output_vm.outputs.vm_name }}" >> $GITHUB_ENV
          echo "ADMIN_USERNAME=${{ steps.output_vm.outputs.admin_username }}" >> $GITHUB_ENV
          echo "PUBLIC_IP=${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV
          echo "SSH_COMMAND=ssh ${{ steps.output_vm.outputs.admin_username }}@${{ steps.output_vm.outputs.public_ip }}" >> $GITHUB_ENV

      - name: Instalar Ansible e sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      - name: Criar Inventário Ansible
        run: |
          echo "[vm]" > inventory
          echo "${{ env.PUBLIC_IP }} ansible_user=${{ env.ADMIN_USERNAME }} ansible_password=${{ secrets.ADMIN_PASSWORD }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory

      - name: Executar Playbook Ansible
        run: |
          ansible-playbook -i inventory ansible/playbook.yml --extra-vars "ansible_sudo_pass=${{ secrets.ADMIN_PASSWORD }}"

  destroy:
    if: ${{ github.event.inputs.destroy == 'true' }}
    name: 🧨 Destruir Infraestrutura
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Limpar Terraform antigo
        working-directory: infra
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl

      - name: Executar Terraform Destroy com timeout no lock
        working-directory: infra
        run: |
          export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
          export ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
          export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}

          terraform init -reconfigure \
            -backend-config="resource_group_name=rg-tfstate" \
            -backend-config="storage_account_name=tfstatecurso12124" \
            -backend-config="container_name=tfstate"

          terraform destroy -lock-timeout=5m -auto-approve
